import pygame
import random

pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 300, 600
GRID_SIZE = 30
COLUMNS, ROWS = WIDTH // GRID_SIZE, HEIGHT // GRID_SIZE
FPS = 10

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
COLORS = [
    (0, 255, 255),  # I shape
    (255, 0, 255),  # T shape
    (0, 255, 0),    # S shape
    (255, 0, 0),    # Z shape
    (0, 0, 255),    # J shape
    (255, 165, 0),  # L shape
    (255, 255, 0)   # O shape
]

# Tetrimino shapes
SHAPES = [
    [[1, 1, 1, 1]],  # I shape
    [[1, 1, 1], [0, 1, 0]],  # T shape
    [[0, 1, 1], [1, 1, 0]],  # S shape
    [[1, 1, 0], [0, 1, 1]],  # Z shape
    [[1, 0, 0], [1, 1, 1]],  # J shape
    [[0, 0, 1], [1, 1, 1]],  # L shape
    [[1, 1], [1, 1]]  # O shape
]

# Initialize screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tetris")

# Functions
def rotate(shape):
    return [list(row)[::-1] for row in zip(*shape)]

def create_grid(locked_positions={}):
    grid = [[BLACK for _ in range(COLUMNS)] for _ in range(ROWS)]
    for (x, y), color in locked_positions.items():
        grid[y][x] = color
    return grid

def valid_position(shape, offset):
    for y, row in enumerate(shape):
        for x, cell in enumerate(row):
            if cell and (
                x + offset[0] < 0
                or x + offset[0] >= COLUMNS
                or y + offset[1] >= ROWS
                or (x + offset[0], y + offset[1]) in locked_positions
            ):
                return False
    return True

def clear_rows(grid, locked_positions):
    cleared_rows = 0
    for y in range(ROWS - 1, -1, -1):
        if all(grid[y][x] != BLACK for x in range(COLUMNS)):
            cleared_rows += 1
            for x in range(COLUMNS):
                del locked_positions[(x, y)]
            for key in sorted(list(locked_positions), key=lambda x: x[1])[::-1]:
                if key[1] < y:
                    new_key = (key[0], key[1] + 1)
                    locked_positions[new_key] = locked_positions.pop(key)
    return cleared_rows

# Main game loop
def main():
    locked_positions = {}
    grid = create_grid(locked_positions)
    
    change_piece = False
    current_piece = random.choice(SHAPES)
    current_color = random.choice(COLORS)
    current_x, current_y = COLUMNS // 2 - len(current_piece[0]) // 2, 0

    clock = pygame.time.Clock()
    fall_time = 0

    running = True
    while running:
        grid = create_grid(locked_positions)
        fall_time += clock.get_rawtime()
        clock.tick(FPS)

        if fall_time / 1000 >= 0.3:
            fall_time = 0
            current_y += 1
            if not valid_position(current_piece, (current_x, current_y)):
                current_y -= 1
                change_piece = True

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_PAGEUP:  # Move left
                    current_x -= 1
                    if not valid_position(current_piece, (current_x, current_y)):
                        current_x += 1
                elif event.key == pygame.K_PAGEDOWN:  # Move right
                    current_x += 1
                    if not valid_position(current_piece, (current_x, current_y)):
                        current_x -= 1
                elif event.key == pygame.K_HOME:  # Rotate
                    rotated_piece = rotate(current_piece)
                    if valid_position(rotated_piece, (current_x, current_y)):
                        current_piece = rotated_piece
                elif event.key == pygame.K_END:  # Drop
                    current_y += 1
                    while valid_position(current_piece, (current_x, current_y)):
                        current_y += 1
                    current_y -= 1
                    change_piece = True

        shape_pos = [(x + current_x, y + current_y) for y, row in enumerate(current_piece) for x, cell in enumerate(row) if cell]

        for x, y in shape_pos:
            grid[y][x] = current_color

        if change_piece:
            for pos in shape_pos:
                locked_positions[pos] = current_color
            current_piece = random.choice(SHAPES)
            current_color = random.choice(COLORS)
            current_x, current_y = COLUMNS // 2 - len(current_piece[0]) // 2, 0
            if not valid_position(current_piece, (current_x, current_y)):
                running = False  # Game over
            change_piece = False
            clear_rows(grid, locked_positions)

        screen.fill(BLACK)
        for y in range(ROWS):
            for x in range(COLUMNS):
                pygame.draw.rect(screen, grid[y][x], (x * GRID_SIZE, y * GRID_SIZE, GRID_SIZE, GRID_SIZE), 0)
        pygame.display.update()

    pygame.quit()

if __name__ == "__main__":
    main()
